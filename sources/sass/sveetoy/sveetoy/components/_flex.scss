@import "foundation/components/grid";

/*
 *
 * Flexbox
 *
 */

// Default available percentage sizes
// Sizes like '18' is when you want a '20%' container but with '1%' horizontal
// marging (ex: 1% + 18% + 1% = 20%)
$flex-grid-sizes: 25 33.3333 50 75 100 !default;
$flex-grid-gutter: 0.5rem !default;

$include-sveetoy-flex: $include-sveetoy-classes !default;

/*
 * Create flex cell width rules
 */
@mixin sveetoy-flex-cell-width($width, $less: null) {
    @if $less == null {
        flex: 1 0 $width;
        max-width: $width;
    } @else {
        flex: 1 0 calc(#{$width} - #{$less});
        max-width: calc(#{$width} - #{$less});
    }
}

/*
 * Mixin to create cells widths with flexbox
 *
 * Will produce responsive class like:
 *
 *   .small-50{...}
 *   .medium-50{...}
 *   etc..
 *
 * Depending on mixin declarations.
 *
 * Usable in conjunction with ".cell".
 */
@mixin sveetoy-flex-grid-classes($sizes, $viewport: small, $gutter: null) {
    $gutter-substraction: null;
    @if $gutter != null {
        $gutter-substraction: $gutter*2;
    }
    @each $size in $sizes {
        $width: percentage($size / 100);
        $name: floor($size);
        // Will name it like "&.small-50"
        & > .#{$viewport}-#{$name} {
            @include sveetoy-flex-cell-width($width, $less: $gutter-substraction);
        }
    }
}

/*
 * Mixin to create flexbox display property
 *
 * Will produce global and responsive classes like:
 *
 *   .flex{...}
 *   .flex-small{...}
 *   .flex-medium{...}
 *   etc..
 *
 */
@mixin sveetoy-flex-display($viewport: null) {
    $suffix: if($viewport, "-#{$viewport}", "");
    .flex#{$suffix} {
        display: flex;
    }
}

/*
 * Mixin to create "simple" cells widths
 * Mixin to simulate inline list, used as a fallback
 *
 * Reproduce the same name pattern as in mixin "sveetoy-flex-grid-classes"
 */
@mixin sveetoy-simulate-grid-columns($sizes, $viewport: small) {
    @each $size in $sizes {
        $width: $size / 100;
        $name: floor($size);
        // Will name it like "&.small-50"
        & > .#{$viewport}-#{$name} {
            width: percentage($width);
        }
    }
}

@if $include-sveetoy-flex {
    /*
    * Inline list with flexbox
    */
    // For browser with flexbox capability (detected from modernizr)
    html.flexbox {
        @include sveetoy-flex-display;
        @media #{$small-up} {
            @include sveetoy-flex-display($viewport: small);
        }
        @media #{$medium-up} {
            @include sveetoy-flex-display($viewport: medium);
        }
        @media #{$large-up} {
            @include sveetoy-flex-display($viewport: large);
        }
        @media #{$xlarge-up} {
            @include sveetoy-flex-display($viewport: xlarge);
        }
        @media #{$xxlarge-up} {
            @include sveetoy-flex-display($viewport: xxlarge);
        }
        .flex-grid {
            display: flex;
            flex-wrap: wrap;
            // Disable horizontal margins to avoid bad cell widths
            margin-left: 0;
            margin-right: 0;

            & > .cell {
                // Default is to have the same width and height for all items using
                // the largest value from all items (default flex display behavior)
                flex: 1 0 auto;
                max-width: auto;
                margin: 0;
                list-style-type: none;

                // Last element paragraph dont have bottom margin
                & > p:last-child {
                    margin: 0;
                }

                /*
                * Some cell contents alignments
                */
                // All container elements are vertically stacked on center
                &.align-start{
                    display: flex;
                    flex-direction: column;
                    justify-content: flex-start;
                }
                // All container elements are vertically stacked on center
                &.align-end{
                    display: flex;
                    flex-direction: column;
                    justify-content: flex-end;
                }
                // All container elements are vertically stacked on center
                &.align-center{
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                }
                // All container elements are stacked with space around
                &.align-around{
                    display: flex;
                    flex-direction: column;
                    justify-content: space-around;
                }
                // All container elements are stacked with space between
                &.align-between{
                    display: flex;
                    flex-direction: column;
                    justify-content: space-between;
                }
            }

            /*
            * Responsive cell sizes
            */
            @media #{$small-up} {
                @include sveetoy-flex-grid-classes($flex-grid-sizes, $viewport: small);
            }
            @media #{$medium-up} {
                @include sveetoy-flex-grid-classes($flex-grid-sizes, $viewport: medium);
            }
            @media #{$large-up} {
                @include sveetoy-flex-grid-classes($flex-grid-sizes, $viewport: large);
            }
            @media #{$xlarge-up} {
                @include sveetoy-flex-grid-classes($flex-grid-sizes, $viewport: xlarge);
            }
            @media #{$xxlarge-up} {
                @include sveetoy-flex-grid-classes($flex-grid-sizes, $viewport: xxlarge);
            }

            /*
            * Responsive margin on every contained cells
            */
            &.marged{
                &> .cell{
                    margin: $flex-grid-gutter;
                }

                @media #{$small-up} {
                    @include sveetoy-flex-grid-classes($flex-grid-sizes, $viewport: small, $gutter: $flex-grid-gutter);
                }
                @media #{$medium-up} {
                    @include sveetoy-flex-grid-classes($flex-grid-sizes, $viewport: medium, $gutter: $flex-grid-gutter);
                }
                @media #{$large-up} {
                    @include sveetoy-flex-grid-classes($flex-grid-sizes, $viewport: large, $gutter: $flex-grid-gutter);
                }
                @media #{$xlarge-up} {
                    @include sveetoy-flex-grid-classes($flex-grid-sizes, $viewport: xlarge, $gutter: $flex-grid-gutter);
                }
                @media #{$xxlarge-up} {
                    @include sveetoy-flex-grid-classes($flex-grid-sizes, $viewport: xxlarge, $gutter: $flex-grid-gutter);
                }
            }
        }
    }

    // Fallback for browsers that dont have flexbox capability, we inherit from Foundation grid row
    // This may soon be deprecated around 2016
    html.no-flexbox {
        .flex-grid{
            list-style-type: none;
            @extend .row;
            & > .cell {
                @extend .columns;
            }
            @media #{$small-up} {
                @include sveetoy-simulate-grid-columns($flex-grid-sizes, $viewport: small);
            }
            @media #{$medium-up} {
                @include sveetoy-simulate-grid-columns($flex-grid-sizes, $viewport: medium);
            }
            @media #{$large-up} {
                @include sveetoy-simulate-grid-columns($flex-grid-sizes, $viewport: large);
            }
            @media #{$xlarge-up} {
                @include sveetoy-simulate-grid-columns($flex-grid-sizes, $viewport: xlarge);
            }
            @media #{$xxlarge-up} {
                @include sveetoy-simulate-grid-columns($flex-grid-sizes, $viewport: xxlarge);
            }
        }
    }
}
