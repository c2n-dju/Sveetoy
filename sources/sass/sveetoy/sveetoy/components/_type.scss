@import "../mixins/colors";

/*
 *
 * Typography
 *
 */
$include-sveetoy-typography: $include-sveetoy-classes !default;

// Some font weight in addition of Foundation ones
$font-weight-thin: null !default;
$font-weight-strong: null !default;

$sveetoy-smalls: () !default;

$sveetoy-underline-thickness: () !default;
$sveetoy-underline-distances: () !default;
$sveetoy-underline-widths: () !default;
$sveetoy-underline-colors: () !default;

@if $include-sveetoy-typography {
    // No trailing margin on last paragraph in their container
    p {
        &:last-child{
            margin-bottom: 0;
        }
    }

    /* TODO: Issue #4 */
    /// Horizontal rule
    hr{
        &.unmarged{
            margin: 0;
        }
    }

    /*
    * Transform and decoration
    */
    .text-upper{
        text-transform: uppercase !important;
    }
    .text-important{
        text-decoration: underline !important;
    }

    /*
    * Various font weights
    */
    @if $font-weight-thin{
        .text-thin{
            font-weight: $font-weight-thin !important;
        }
    }
    .text-normal{
        font-weight: $font-weight-normal !important;
    }
    b, .text-bold{
        font-weight: $font-weight-bold !important;
    }
    @if $font-weight-strong{
        strong, .text-strong{
            font-weight: $font-weight-strong;
        }
    }

    ///
    /// Text colors
    ///
    @each $name, $color in $sveetoy-color-text-palette {
        &.text-#{$name} {
            color: $color !important;
        }
    }

    ///
    /// Various <small> modifier
    ///
    small{
        @each $name, $size in $sveetoy-smalls {
            &.#{$name} {
                font-size: $size;
            }
        }
    }

    ///
    /// Rewrite titles adding paragraph classes so we can have the same
    /// behaviors without troubling SEO/semantic
    ///
    h1, h2, h3, h4, h5, h6,
    .title-1, .title-2, .title-3, .title-4, .title-5, .title-6 {
        font-family: $header-font-family;
        font-weight: $header-font-weight;
        font-style: $header-font-style;
        color: $header-font-color;
        text-rendering: $header-text-rendering;
        margin-top: $header-top-margin;
        margin-bottom: $header-bottom-margin;
        line-height: $header-line-height;
    }

    // From small size to upper
    //p, li, dd, dt{ font-size: $paragraph-font-size; }
    h1, .title-1 { font-size: $h1-font-size - $h1-font-reduction; }
    h2, .title-2 { font-size: $h2-font-size - $h2-font-reduction; }
    h3, .title-3 { font-size: $h3-font-size - $h3-font-reduction; }
    h4, .title-4 { font-size: $h4-font-size - $h4-font-reduction; }
    h5, .title-5 { font-size: $h5-font-size - $h5-font-reduction; }
    h6, .title-6 { font-size: $h6-font-size - $h6-font-reduction; }

    // Final size for large screen and up
    @media #{$xlarge-up} {
        h1, .title-1 { font-size: $h1-font-size; }
        h2, .title-2 { font-size: $h2-font-size; }
        h3, .title-3 { font-size: $h3-font-size; }
        h4, .title-4 { font-size: $h4-font-size; }
        h5, .title-5 { font-size: $h5-font-size; }
        h6, .title-6 { font-size: $h6-font-size; }
    }

    ///
    /// Underlined element
    ///
    .underline{
        @if map-get($sveetoy-underline-thickness, 'normal') == null {
            @error "$sveetoy-underline-thickness must contain at least the 'normal' key";
        }
        @if map-get($sveetoy-underline-widths, 'normal') == null {
            @error "$sveetoy-underline-widths must contain at least the 'normal' key";
        }
        @if map-get($sveetoy-underline-distances, 'normal') == null {
            @error "$sveetoy-underline-distances must contain at least the 'normal' key";
        }
        // Base
        &:after{
            $thickness: map-get($sveetoy-underline-thickness, 'normal');
            $width: map-get($sveetoy-underline-widths, 'normal');
            $distance: map-get($sveetoy-underline-distances, 'normal');

            content:"";
            display: block;
            width: $width;
            height: map-get($thickness, 'height');
            margin-top: $distance;
            margin-left: 0;
            margin-right: 0;
            border-bottom: map-get($thickness, 'border');
        }

        // On centered text
        &.text-center{
            &:after{
                margin-left: auto;
                margin-right: auto;
            }
        }

        // Border thickness
        @each $name, $definitions in $sveetoy-underline-thickness {
            &.#{$name}:after {
                height: map-get($definitions, 'height');
                border-bottom: map-get($definitions, 'border');
            }
        }

        // Border width size
        @each $name, $size in $sveetoy-underline-widths {
            &.#{$name}:after {
                width: $size;
            }
        }

        // Border distance from text
        @each $name, $distance in $sveetoy-underline-distances {
            &.#{$name}{
                &:after{
                    margin-top: $distance;
                    margin-left: 0;
                    margin-right: 0;
                }
                &.text-center{
                    &:after{
                        margin-top: $distance;
                        margin-left: auto;
                        margin-right: auto;
                    }
                }
            }
        }

        // Border colors
        @each $name, $color in $sveetoy-underline-colors {
            &.#{$name}:after {
                border-color: $color;
            }
        }
    }
}