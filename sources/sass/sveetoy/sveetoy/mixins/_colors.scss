////
/// @group colors
////


///
/// Include properties from a scheme color to an element.
///
/// @arg {Map} $scheme [null]
///   A [`Color scheme model`](#models-variable-Color scheme model).
///
/// @arg {Bool} $apply-border [false]
///   If set to `true`, scheme border properties will be used, else they are
///   ignored.
///
/// @example scss
///   $white-color-scheme: (
///       font-color: #000000,
///       background-color: #ffffff,
///       h1-color: #f0f0f0,
///       h2-color: false,
///   );
///
///   div{
///       @include sv-scheme-colors($white-color-scheme);
///   }
///
/// @example css
///   div{
///       color: #000000;
///       background-color: #ffffff;
///
///       h1, .title-1{
///           color: #f0f0f0;
///       }
///       h2, .title-2{}
///       h3, .title-3{
///           color: #000000;
///       }
///       h4, .title-4{
///           color: #000000;
///       }
///       h5, .title-5{
///           color: #000000;
///       }
///       h6, .title-6{
///           color: #000000;
///       }
///   }
///
@mixin sv-scheme-colors($scheme, $apply-border: false) {
    // Raise error if background-color item is not in scheme
    @if map-get($scheme, "background-color") == null {
        @error "A scheme color must define the background-color item";
    } @else if (map-get($scheme, "background-color") == transparent or map-get($scheme, "background-color") == inherit) and map-get($scheme, "font-color") == null {
        @error "A scheme color must define the font-color item if background-color value is transparent or inherit";
    }

    $background-color: map-get($scheme, "background-color");
    $font_item: map-get($scheme, "font-color");
    $font-color: if($font_item, $font_item, invert($background-color));
    $link-color: map-get($scheme, "link-color");
    $link-color-hover: map-get($scheme, "link-color-hover");

    color: $font-color;
    background-color: $background-color;

    // Optional border
    @if $apply-border{
        @include sv-apply-border($scheme);
    }

    // Titles
    @for $i from 1 through 6 {
        h#{$i}, .title-#{$i} {
            @if map-get($scheme, "h#{$i}-color") == null {
                color: $font-color;
            } @else if map-get($scheme, "h#{$i}-color") == false {
                // 'false' means "Do not define any color on this"
            } @else {
                color: map-get($scheme, "h#{$i}-color");
            }
        }
    }

    // Link but not buttons
    @if $link-color {
        a:not(.button){
            color: if($link-color, $link-color, inherit);
            @if $link-color-hover {
                &:hover{
                    color: if($link-color-hover, $link-color-hover, inherit);
                }
            }
        }
    }
}

///
/// Include properties from a scheme color to a button element.
///
/// Work like `sv-scheme-colors()` mixin except properties for links and
/// titles are ignored.
///
/// @arg {Map} $scheme [null]
///   A [`Color scheme model`](#models-variable-Color scheme model).
///
/// @arg {Bool} $apply-border [false]
///   If set to `true`, scheme border properties will be used, else they are
///   ignored.
///
@mixin sv-button-colors($scheme, $apply-border: false) {
    $background-color: map-get($scheme, "background-color");

    $font-item: map-get($scheme, "font-color");
    $font-color: if($font-item, $font-item, invert($background-color));

    color: $font-color;
    background-color: $background-color;

    @if $apply-border{
        @include sv-apply-border($scheme);
    }
}

///
/// Apply border properties for given scheme.
///
/// @arg {Map} $scheme [null]
///   A [`Color scheme model`](#models-variable-Color scheme model).
///
/// If `border-color` is null, `font-color` reverse value is used instead
/// using Sass function `invert()`.
///
@mixin sv-apply-border($scheme) {
    $background-color: map-get($scheme, "background-color");
    $font-item: map-get($scheme, "font-color");
    $font-color: if($font-item, $font-item, invert($background-color));

    $border-color: map-get($scheme, "border-color");
    $border-width: map-get($scheme, "border-width");
    $border-style: map-get($scheme, "border-style");

    border-color: if($border-color, $border-color, $font-color);
    @if $border-width{
        border-width: $border-width;
    }
    @if $border-style{
        border-style: $border-style;
    }
}
