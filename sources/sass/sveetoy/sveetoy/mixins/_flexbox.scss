/*
 *
 * Flexbox
 */
////
/// @group flexbox
////


///
/// Create flex shortand (grow, shrink, basis) rule.
///
/// @arg {Number} $width [null]
///   Width for flex basis and max width.
///
/// @arg {Number} $less [null]
///   If not null, width will be a `calc()` function where `$less` is
///   substracted to `$width`.
///
/// @example scss
///   div{
///       @include sveetoy-flex-cell-width(25%);
///   }
///
///   // Output
///   div{
///       flex: 1 0 25%;
///       max-width: 25%;
///   }
///
/// @example scss
///   div{
///       @include sveetoy-flex-cell-width(25%, $less:10px);
///   }
///
///   // Output CSS
///   div{
///       flex: 1 0 calc(25% - 10px);
///       max-width: calc(25% - 10px);
///   }
///
@mixin sveetoy-flex-cell-width($width, $less: null) {
    @if $less == null {
        flex: 1 0 $width;
        max-width: $width;
    } @else {
        flex: 1 0 calc(#{$width} - #{$less});
        max-width: calc(#{$width} - #{$less});
    }
}


///
/// Create direct child selectors for responsive flex width classes.
///
/// @arg {List} $sizes [null]
///   List of unitless number to create various flex cell widths. Value can be
///   a float number but class name will ignore everything after decimal such
///   as `33.333` will produce `33`.
///
/// @arg {String} $viewport [small]
///   Breakpoint name to prefix produced class names.
///
/// @arg {Number} $gutter [null]
///   Gutter to apply around width. Value is multiplied by two then
///   substracted to each size.
///
/// @example scss
///   div{
///       @each $size in 25 33.3333 50 {
///           @include sveetoy-flex-grid-classes($size);
///       }
///   }
///
///   // Output CSS
///   div > .small-25{
///       flex: 1 0 25%;
///       max-width: 25%;
///   }
///   div > .small-33{
///       flex: 1 0 33.3333%;
///       max-width: 33.3333%;
///   }
///   div > .small-50{
///       flex: 1 0 50%;
///       max-width: 50%;
///   }
///
@mixin sveetoy-flex-grid-classes($sizes, $viewport: small, $gutter: null) {
    $gutter-substraction: null;
    @if $gutter != null {
        $gutter-substraction: $gutter*2;
    }
    @each $size in $sizes {
        $width: percentage($size / 100);
        $name: floor($size);
        // Will name it like "&.small-50"
        & > .#{$viewport}-#{$name} {
            @include sveetoy-flex-cell-width($width, $less: $gutter-substraction);
        }
    }
}


///
/// Create a CSS class for a flex display rule with optionnal suffix.
///
/// @arg {String} $viewport [null]
///   Optional suffix to add to class name.
///
///
/// @example scss
///   div.foo{
///       @include sveetoy-flex-display();
///   }
///   div.bar{
///       @include sveetoy-flex-display(small);
///   }
///
///   // Output CSS
///   div.foo .flex{
///       display: flex;
///   }
///   div.bar .flex-small{
///       display: flex;
///   }
///
@mixin sveetoy-flex-display($viewport: null) {
    $suffix: if($viewport, "-#{$viewport}", "");
    .flex#{$suffix} {
        display: flex;
    }
}


///
/// Create CSS classes for flex direction rules with optionnal responsive
/// suffix.
///
/// @arg {String} $viewport [null]
///   Optional suffix to add to class names.
///
///
/// @example scss
///   div.foo{
///       @include sveetoy-flex-direction();
///   }
///   div.bar{
///       @include sveetoy-flex-direction(small);
///   }
///
///   // Output CSS
///   div.foo .direction{
///       display: flex;
///   }
///   div.foo .direction-row{
///       flex-direction: row;
///   }
///   div.foo .direction-row-reverse{
///       flex-direction: row-reverse;
///   }
///   div.foo .direction-column{
///       flex-direction: column;
///   }
///   div.foo .direction-column-reverse{
///       flex-direction: column-reverse;
///   }
///
///   div.bar .direction-small{
///       display: flex;
///   }
///   div.bar .direction-small-row{
///       flex-direction: row;
///   }
///   div.bar .direction-small-row-reverse{
///       flex-direction: row-reverse;
///   }
///   div.bar .direction-small-column{
///       flex-direction: column;
///   }
///   div.bar .direction-small-column-reverse{
///       flex-direction: column-reverse;
///   }
///
@mixin sveetoy-flex-direction($viewport: null) {
    $suffix: if($viewport, "-#{$viewport}", "");
    &.direction#{$suffix} {
        display: flex;
    }
    &.direction#{$suffix}-row{
        flex-direction: row;
    }
    &.direction#{$suffix}-row-reverse{
        flex-direction: row-reverse;
    }
    &.direction#{$suffix}-column{
        flex-direction: column;
    }
    &.direction#{$suffix}-column-reverse{
        flex-direction: column-reverse;
    }
}


///
/// Create CSS classes to apply vertical alignments through flex rules
///
/// @arg {String} $viewport [null]
///   Optional suffix to add to class names.
///
/// @arg {String} $parent [null]
///   Optional prefix to attach to class selectors.
///
///
/// @example scss
///   div.foo{
///       @include sveetoy-flex-vertical-alignment();
///   }
///   div.suffixed{
///       @include sveetoy-flex-vertical-alignment(small);
///   }
///   div.prexixed-n-suffixed{
///       @include sveetoy-flex-vertical-alignment(small, '.ping');
///   }
///
///   // Output CSS
///   div.foo .v-align-start {
///       display: flex;
///       flex-direction: column;
///       justify-content: flex-start;
///   }
///   div.foo .v-align-end {
///       display: flex;
///       flex-direction: column;
///       justify-content: flex-end;
///   }
///   div.foo .v-align-center {
///       display: flex;
///       flex-direction: column;
///       justify-content: center;
///   }
///   div.foo .v-align-around {
///       display: flex;
///       flex-direction: column;
///       justify-content: space-around;
///   }
///   div.foo .v-align-between {
///       display: flex;
///       flex-direction: column;
///       justify-content: space-between;
///   }
///
///   div.suffixed .v-align-small-start {
///       display: flex;
///       flex-direction: column;
///       justify-content: flex-start;
///   }
///   div.suffixed .v-align-small-end {
///       display: flex;
///       flex-direction: column;
///       justify-content: flex-end;
///   }
///   div.suffixed .v-align-small-center {
///       display: flex;
///       flex-direction: column;
///       justify-content: center;
///   }
///   div.suffixed .v-align-small-around {
///       display: flex;
///       flex-direction: column;
///       justify-content: space-around;
///   }
///   div.suffixed .v-align-small-between {
///       display: flex;
///       flex-direction: column;
///       justify-content: space-between;
///   }
///
///   div.prexixed-n-suffixed .ping.v-align-small-start {
///       display: flex;
///       flex-direction: column;
///       justify-content: flex-start;
///   }
///   div.prexixed-n-suffixed .ping.v-align-small-end {
///       display: flex;
///       flex-direction: column;
///       justify-content: flex-end;
///   }
///   div.prexixed-n-suffixed .ping.v-align-small-center {
///       display: flex;
///       flex-direction: column;
///       justify-content: center;
///   }
///   div.prexixed-n-suffixed .ping.v-align-small-around {
///       display: flex;
///       flex-direction: column;
///       justify-content: space-around;
///   }
///   div.prexixed-n-suffixed .ping.v-align-small-between {
///       display: flex;
///       flex-direction: column;
///       justify-content: space-between;
///   }
///
@mixin sveetoy-flex-vertical-alignment($viewport: null, $parent: null) {
    $suffix: if($viewport, "-#{$viewport}", "");
    $parentsel: if($parent, "{$parent}", "");
    // All container elements are vertically stacked on center
    #{$parent}.v-align#{$suffix}-start{
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
    }
    // All container elements are vertically stacked on center
    #{$parent}.v-align#{$suffix}-end{
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
    }
    // All container elements are vertically stacked on center
    #{$parent}.v-align#{$suffix}-center{
        display: flex;
        flex-direction: column;
        justify-content: center;
    }
    // All container elements are stacked with space around
    #{$parent}.v-align#{$suffix}-around{
        display: flex;
        flex-direction: column;
        justify-content: space-around;
    }
    // All container elements are stacked with space between
    #{$parent}.v-align#{$suffix}-between{
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
}

///
/// Create direct child selectors for responsive width classes.
///
/// This aimed to be a fallback for browser without flebox support, used in
/// conjunction with float property.
///
/// This is deprecated now and may be removed soon.
///
/// @arg {List} $sizes [null]
///   List of unitless number to create various flex cell widths. Value can be
///   a float number but class name will ignore everything after decimal such
///   as `33.333` will produce `33`.
///
/// @arg {String} $viewport [small]
///   Breakpoint name to prefix produced class names.
///
@mixin sveetoy-simulate-grid-columns($sizes, $viewport: small) {
    @each $size in $sizes {
        $width: $size / 100;
        $name: floor($size);
        // Will name it like "&.small-50"
        & > .#{$viewport}-#{$name} {
            width: percentage($width);
        }
    }
}
